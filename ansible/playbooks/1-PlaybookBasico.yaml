# Playbook
# Es un conjunto de PLAYS
# Esos plays son el equivalente a un script
# Lo normal es que un playbook contenga solo un play

-   # Indica en que entornos debe aplicarse este playbook
    hosts: all  # Esta es la práctica extendida
                # La limitación de en qué entornos se ejecuatrá este playbook puede establecerse en varios lugares... 
                # Habitualmente se establece en otro sitio... al ejecutar el playbook
    # En que orden se aplicará el playbook en las máquians remotas del inventario
    order: inventory # reverse_inventory | sorted (alfabetico) | reverse_sorted | shuffle
    
    # Permite obtener información del entorno remoto que estamos configurando
    gather_facts: True
    
    # Variables que podemos usar dentro del playbook
    # En ansible, existen más de 20 sitios diferentes donde definir variables.
    # Es un caos, sobre todo el saber cuales tienen prioridad.
    vars: # Aqui debo incluir un mapa YAML
        variable1: valor de la variable 1       # Texto
        variable2: 2                            # Número
        variable3: True                         # Logico
        variable4:                              # Lista
            - item 1
            - item 2
        RUTA: /tmp/prueba
    
    # Indica 
    pre_tasks: []
    # Aqui se eveluarían handlers
    tasks:
        -   # Primera tarea
            name: Primera tarea
            # Referencia a un Módulo
            debug:
                msg: Esta es la primera tarea

        -   name: Tarea que accede a variables
            debug:
                msg: "El valor de la variable 1 es: {{ variable1 }}"
                                                    # Interpolación de textos
                                                    # Expresiones JINJA de python
        -   name: Tarea que también accede a variables
            debug:
                msg: |-
                    El valor de la variable 2 es: {{ variable2 }}
                    El valor de la variable 3 es: {{ variable3 }}
            vars:
                variable3: False # Esta tiene prioridad

        -   name: Tarea que accede a los facts
            debug:
                msg: "{{ ansible_facts }}"
            # Si quisiera sacar los facts de una maquina desde la terminal:
            # $ ansible localhost -i inventarios/0-InventarioBasico.ini -m setup 

        -   name: La familia del SO
            debug:
                #msg: "{{ ansible_facts.os_family }}"
                msg: "{{ ansible_facts['os_family'] }}"

        -   name: El primer servidor DNS que hay configurado
            debug:
                msg: "{{ ansible_facts.dns.nameservers[0] }}"
                #msg: "{{ ansible_facts['dns'] }}"

        # Tarea condicional
        -   name: Asegurarme que nginx es utilizable en la maquina
            apt:
                name: git
                state: present
            become: true    # Ejecuta esto con permisos de administrador
            when:
            # Solo cuando se cupla esta condición debe ejecutarse la tarea
                - ansible_facts['os_family'] == 'Debian'    # En el when se deben escribir una expresion JINJA

        # Tarea condicional
        -   name: Asegurarme que git es utilizable en la maquina
            yum:
                name: git
                state: present
            become: true
            when:
                - ansible_facts['os_family'] == 'Redhat'

        -   name: >
                Asegurar que la versión del fichero de 
                configuración del servicio es la adecuada
            debug:
                msg: "Se hará lo que haya que hacer, para que quedé el fichero adecuado si no está"
                # Se cambiará si es necesario.. y si ya se cambió antes?
            # Con esto controlo cuando debe ansible considerar que esta tarea 
            # ha provocado un cambio
            changed_when: True # Aqui podría poner una expresion JINJA
            # El notify solo ocurre si la tarea provoca cambio (changed)
            notify: cambio-configuracion

        -   name: Otra tarea que activa el handler
            debug:
                msg: "Hago algo que cambia el entorno"
            changed_when: True # Aqui podría poner una expresion JINJA
            # El notify solo ocurre si la tarea provoca cambio (changed)
            notify: Reiniciar el servicio de MariaDB

        -   name: Ultima tarea
            debug:
                msg: "que hace algo también"
    # Aqui se eveluarían handlers
    
    post_tasks: 
        -   name: Primer posttask
            debug:
                msg: "Soy un posttask"
                
        -   name: Quiero crear una carpeta
            shell: |
                    RUTA=/tmp
                    
                    if [ -d "$RUTA" ]; then # Comprueba si es un directorio
                        exit 0              # Si lo es te piras, TODO OK !!!
                    elif [ -e "$RUTA" ]; then
                        # No era un directorio
                        # Devuelve true si la ruta existe
                        exit 2              # Tengo algo ahi... que no es un directorio: Fichero, Pipe, Enlace simbolico
                    else
                        # Ni es un directorio , ni hay nada ahi
                        # Por lo tanto, que hago? creo el directorio
                        mkdir -p $RUTA
                            # Si las carpetas intermedias no existen las crea
                            # si la carpeta ya existe no hace nada
                        exit 1
                    fi
            register: creacion_carpeta
            changed_when: creacion_carpeta.rc == 1
            failed_when:  creacion_carpeta.rc > 1
                # python modulo shell:
                #   1 - abre una shell
                #   2 - tira en la shell lo que hayan puesto aqui
                #   3 - ReturnCode -> 1+ -> FAILED 
                #       Si es 0          -> OK | CHANGED

        -   name: Salida de la tarea anterior
            debug:
                msg: "{{ creacion_carpeta }}"


        # Esta tarea genera un error... la ejecución por defecto se corta al haber encontrado un error.
        -   name: Tarea explosiva
            shell:
                cmd: "exit 1"
            register: explosiva
            #failed_when: explosiva.rc > 1
            ignore_errors: True #explosiva.rc == 1


        -   name: Tarea de rescate 
            file: 
                path: /tmp/prueba
                state: directory
            when: explosiva is failed
                
                # python
                #
                #   file: 
                #       1 - Mira a ver si la ruta existe
                    #       2 - Si existe, mira a ver si es un directorio
                        #      3 -  Si es un directorio -> OK
                #              4 -  Si no es un directorio -> FAILED
                #           5- Si no existe...mkdir -p /tmp/prueba
                #                           -> CHANGED
                
        -   block: # Dentro, puedo poner una lista de tareas
                -   name: Tarea que puede dar error 
                    shell:
                        cmd: "exit 17"
                    register: potencialmente_explosiva
                
            rescue: # catch
            
        # Si la tarea da un error. mos gustaria aplciar otras tareas    
                -   name: Tarea que se ejecutará si la anterior produce un error
                    debug:
                        msg: Tarea rescate 1
                    when: potencialmente_explosiva.rc == 17
                    
                -   name: Tarea que se ejecutará si la anterior produce un error
                    debug:
                        msg: Tarea rescate 1
                    when: potencialmente_explosiva.rc == 20
            
            always: # finally
            
                -   name: Tarea que se ejecuta siempre
                    debug:
                        msg: Tarea que siempre ocurre

                
        -   name: Aqui voy a hacer no se cuantos
            block: # Dentro, puedo poner una lista de tareas
                -   name: Tarea 1
                    debug:
                        msg: "Soy la tarea 1 del bloque"
                -   name: Tarea 2
                    shell:
                        cmd: "echo Soy la tarea 1 del bloque {{ variable1 }}"
            vars:
                variable1: Nuevo valor
            #when:
            
                
    # Aqui se eveluarían handlers

    
    # Los handlers son tareas especiales, que se ejecutan después de TODAS
    # las tareas que hayan sido definidas en pre o tasks o post. siempre y cuando hayan sido activadas por otra tarea, 
    # a través de: notify
    # Los handlers se ejecutan 1 sola vez, 
    # aunque hayan sido activados muchas veces
    
    # Los handlers son evaluados 3 veces para ver si es necesaria su ejecución:
    # - despues de los pre
    # - de los tasks
    # - y de los post
    
    
    handlers:        
        -   name: Reiniciar el servicio de MariaDB
            debug:
                msg: "Reinicio el servicio"    
            listen: cambio-configuracion
                
        -   name: Otro handler
            debug:
                msg: "Esta tarea hace lo que sea..."
            listen: cambio-configuracion

# Lista 1 item. 
#    Ese item es un MAPA
#        Ese mapa tiene 2 elementos
