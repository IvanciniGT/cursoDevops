#******
-   name: Asegurarme que mi nginx queda instalado
    include_tasks: "os-tasks/{{ ansible_facts['os_family'] }}/install.yaml"
    vars:
        paquetes:
            nginx: "{{ nginx_version }}"
    
-   name:   Asegurarme que nginx queda configurado como debe estarlo          # CONFIGURACION
    notify: reiniciar-servicio
    debug:
        msg: "Configurando nginx"
    # /etc/nginx/nginx.conf

#******
-   name:   Asegurarme que las apps por defecto de nginx quedan desinstaladas
    block:
        -   name:   Buscar condiguraciones de apps por defecto
            find:
                path: "/etc/nginx/sites-enabled/"
                file-type: "link"
            register: default-apps
        
        -   name:   Asegurarme que las apps por defecto de nginx quedan desinstaladas
            file:
                path: "{{ item.path }}"
                state: absent
            loop: "{{ default-apps.files }}"
    when: install is changed


-   name:   Asegurarme que mi(s) app(s) quedan instaladas
    debug:
        msg: "Instalando apps"
    # /var/webapps/app1
    # Copiar un app web: html, css, js, php
    
    #Tareas: # Idempotencia
    #    1: Asegurarme que las dependencias de este playbook estén instaladas en la máquina
    #    2: Crear la carpeta si no está creada
    #    3: Utilizar el modulo git ... para qué? Pedir a git que clone el repo
    

#******
-   name:   Asegurarme que el servicio queda configurado
    service:
        name: nginx
        enabled: true

#******
-   name:   Asegurarme que los puertos quedan abiertos
    block:
        -   name: Averiguar el firewall en uso
            shell: |
                firewalld --version 1>/dev/null 2>&1
                if [ $? == 0 ]; then
                    echo firewalld
                else
                    ufw --version 1>/dev/null 2>&1
                    if [ $? == 0 ]; then
                        echo ufw
                    else
                        iptables --version 1>/dev/null 2>&1
                        if [ $? == 0 ]; then
                            echo iptables
                        else
                            echo Ninguno
                        fi
                    fi
                fi
            register: firewall_utilizado
            changed_when: False
        
        -   name: Asegurarme que los puertos están abiertos en caso de ser necesario
            include_tasks: "firewall/{{ firewall_utilizado.stdout }}.yaml"
            when: "'Ninguno' not in firewall_utilizado.stdout"
